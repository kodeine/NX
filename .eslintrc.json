{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": [
    "@nx",
    "prettier",
    "import",
    "simple-import-sort",
    "eslint-plugin-tsdoc"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:prettier/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "settings": {
        "import/parsers": {
          "@typescript-eslint/parser": [".ts", ".tsx"]
        },
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`

            // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default
            // use an array of glob patterns
            "project": ["libs/*/tsconfig.lib.json", "apps/*/tsconfig.app.json"]
          }
        }
      },
      "rules": {
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],
        //
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/no-unused-vars": "off",

        // import: turn on errors for missing imports
        "import/no-unresolved": "error",
        // never allow default export
        "import/prefer-default-export": "off",
        // never allow default export
        "import/no-default-export": "off",
        // added by airbnb not-practical for entity-relation definitions
        "import/no-cycle": "off",

        // simple-import-sort:
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",

        // airbnb default is 1
        "max-classes-per-file": ["error", 6],
        // needed so we can use class scoped generics in methods.
        "class-methods-use-this": "off",
        // airbnb default this doesnt work when using parameter decorators.
        "@typescript-eslint/no-useless-constructor": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/unbound-method": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/require-await": "off",
        "require-await": "off",
        "no-prototype-builtins": "off",
        // "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        // override airbnb to allow class interface merging
        "@typescript-eslint/no-redeclare": [
          "error",
          { "ignoreDeclarationMerge": true }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.spec.js", "*.spec.jsx"],
      "env": {
        "jest": true
      },
      "rules": {}
    }
  ]
}
